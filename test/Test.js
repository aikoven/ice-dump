// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var Slice = Ice.Slice;

    var Test = __M.module("Test");

    Test.SomeStruct = Slice.defineStruct(
        function(boolVal)
        {
            this.boolVal = boolVal !== undefined ? boolVal : false;
        },
        true,
        function(__os)
        {
            __os.writeBool(this.boolVal);
        },
        function(__is)
        {
            this.boolVal = __is.readBool();
        },
        1, 
        true);

    Test.Base = Slice.defineObject(
        function(intVal, optionalStruct)
        {
            Ice.Object.call(this);
            this.intVal = intVal !== undefined ? intVal : 0;
            this.optionalStruct = optionalStruct;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::Test::Base"
        ],
        -1,
        function(__os)
        {
            __os.writeInt(this.intVal);
            Test.SomeStruct.writeOpt(__os, 1, this.optionalStruct);
        },
        function(__is)
        {
            this.intVal = __is.readInt();
            this.optionalStruct = Test.SomeStruct.readOpt(__is, 1);
        },
        false);

    Test.BasePrx = Slice.defineProxy(Ice.ObjectPrx, Test.Base.ice_staticId, undefined);

    Slice.defineOperations(Test.Base, Test.BasePrx);

    Test.TestObj = Slice.defineObject(
        function(intVal, optionalStruct, stringVal, stringSeqVal, nestedObject, nestedStruct, optionalIntSeqVal)
        {
            Test.Base.call(this, intVal, optionalStruct);
            this.stringVal = stringVal !== undefined ? stringVal : "";
            this.stringSeqVal = stringSeqVal !== undefined ? stringSeqVal : null;
            this.nestedObject = nestedObject !== undefined ? nestedObject : null;
            this.nestedStruct = nestedStruct !== undefined ? nestedStruct : new Test.SomeStruct();
            this.optionalIntSeqVal = optionalIntSeqVal;
        },
        Test.Base, undefined, 2,
        [
            "::Ice::Object",
            "::Test::Base",
            "::Test::TestObj"
        ],
        -1,
        function(__os)
        {
            __os.writeString(this.stringVal);
            Ice.StringSeqHelper.write(__os, this.stringSeqVal);
            __os.writeObject(this.nestedObject);
            Test.SomeStruct.write(__os, this.nestedStruct);
            Ice.IntSeqHelper.writeOpt(__os, 1, this.optionalIntSeqVal);
        },
        function(__is)
        {
            var self = this;
            this.stringVal = __is.readString();
            this.stringSeqVal = Ice.StringSeqHelper.read(__is);
            __is.readObject(function(__o){ self.nestedObject = __o; }, Test.Base);
            this.nestedStruct = Test.SomeStruct.read(__is, this.nestedStruct);
            this.optionalIntSeqVal = Ice.IntSeqHelper.readOpt(__is, 1);
        },
        false);

    Test.TestObjPrx = Slice.defineProxy(Test.BasePrx, Test.TestObj.ice_staticId, undefined);

    Slice.defineOperations(Test.TestObj, Test.TestObjPrx);
    exports.Test = Test;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
